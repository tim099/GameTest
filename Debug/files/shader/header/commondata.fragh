#include <files/shader/header/option>

in VertexData{
	vec2 UV;
	vec3 Normal;
	vec4 position;
	vec4 MVP_pos;
	vec3 T;
	vec3 B;
	float UVlayer;
}vert;

layout(location = 0)out vec4 color;

uniform sampler2D Texture;
uniform sampler2D NormalTexture;

uniform sampler2DArray TextureArr;
uniform sampler2DArray NormalTextureArr;

uniform samplerCube skybox;

uniform vec3 camera_pos;

uniform vec4 mat;
uniform mat4 VP;

#include <files/shader/header/light/light>
#include <files/shader/header/normalMapping.fragh>

vec3 get_tex_color(){
	if((shaderData&LayerTexture)==0){//not active LayerTexture
		return (texture(Texture,vert.UV).rgb);
	}
	return texture(TextureArr,vec3(vert.UV,vert.UVlayer)).rgb;
}
float get_tex_alpha(){
	if((shaderData&AlphaTexture)==0){
		return 1.0f;
	}
	if((shaderData&LayerTexture)==0){//not active LayerTexture
		return (texture(Texture,vert.UV).a);
	}
	return texture(TextureArr,vec3(vert.UV,vert.UVlayer)).a;
}
vec3 get_reflect(vec3 Normal){
    vec3 look_vec=(vert.position.xyz-camera_pos);
    vec3 look_reflect_vec=look_vec-2*(look_vec-dot(look_vec,normalize(Normal))*normalize(Normal));
    return texture(skybox,normalize(look_reflect_vec)).xyz;
}
vec3 get_refract(vec3 Normal,float ratio){
    vec3 look_vec=(vert.position.xyz-camera_pos); 
    vec3 refract_vec=refract(look_vec,normalize(Normal),ratio);    
    return texture(skybox,normalize(refract_vec)).xyz;
}
vec3 get_skybox(){
	vec3 look_vec=(vert.position.xyz-camera_pos); 
	return texture(skybox,normalize(look_vec)).xyz;
}




